#!/bin/bash

set -e

DIR="/etc/arch-secure-boot"

[ -f "$DIR/config" ] && source "$DIR/config"

ESP="${ESP:-/efi}"
EFI="${EFI:-EFI/Linux}"

KERNEL="${KERNEL:-linux}"
KERNEL_LTS="linux-lts"
NAME="recovery-arch-${KERNEL}"
NAME_LTS="recovery-arch-${KERNEL_LTS}"
NAME_EFI_SHELL="efi-shell"

SUBVOLUME_ROOT="${SUBVOLUME_ROOT:-root}"
SUBVOLUME_SNAPSHOT="${SUBVOLUME_SNAPSHOT:-root/.snapshots/%1/snapshot}" # %1 is replaced with snapshot ID

CMDLINE=/etc/kernel/cmdline
[ -f "$CMDLINE" ] || CMDLINE=/proc/cmdline

cmd="$0 $@"
print_config() {
    cat >&2 << EOF

== Command ==
$cmd

== Config ==
ESP=$ESP
EFI=$EFI
KERNEL=$KERNEL
CMDLINE=$CMDLINE
EOF
}
trap 'print_config' ERR

error() {
    echo >&2 "$@"
    exit 1
}

case "$1" in
    initial-setup)
        # TODO(kdevo): we could automate a few things here to ease the setup
        echo "Manual action required: For the unified kernel image, follow steps in https://wiki.archlinux.org/title/Unified_kernel_image#mkinitcpio, from 1.1.1 to 1.1.3"
        echo "When you're done, run mkinitcpio -P and you should see files in $ESP/$EFI. Press ENTER to continue."
        read -n1
        echo "Manual action required: Follow steps in https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Assisted_process_with_sbctl or run "$0 generate-keys" && "$0 enroll-keys" if you know what you're doing."
        read -n1
        echo "Press ENTER to continue with re-generating EFI binaries and signing them."
        #"$0" generate-keys
        #"$0" enroll-keys
        "$0" generate-efi
        "$0" add-efi
        ;;

    generate-snapshots)
        snapper --no-dbus --iso -t 0 -c root list --disable-used-space --columns number,date,description | sort -b -gr | head -n -2 > "$ESP/snapshots.txt"
        sed "s|{{snapshot_count}}|$(wc -l < "$ESP/snapshots.txt")|g" "$DIR/recovery.ascii.tmpl" > "$ESP/recovery.ascii"
        sed -i "s|{{created_at}}|$(date --rfc-3339=seconds)|g" "$ESP/recovery.ascii"
        ;;

    generate-efi)
        echo "Generating EFI images..."

        mkinitcpio -p recovery
        sbctl verify
        cp -T -v /usr/share/edk2-shell/x64/Shell_Full.efi "$ESP/$EFI/$NAME_EFI_SHELL.efi"
        for efi in "$ESP/$EFI/"*; do sbctl sign "$efi"; done
        sbctl verify

        # prepare recovery.nsh
        tmp="$(mktemp -d)"
        trap 'rm -rf $tmp' EXIT
        cd "$tmp"

        path="/$EFI/$NAME.efi"
        path_lts="/$EFI/$NAME_LTS.efi"

        grep -m1 -v "^#" "$CMDLINE" > cmdline
        sed "s|{{PATH}}|${path//\//\\\\}|g; s|{{CMDLINE}}|$(cat cmdline)|g" "$DIR/recovery.nsh.tmpl" > recovery.nsh
        sed -i "s|{{PATH_LTS}}|${path_lts//\//\\\\}|g; s|{{CMDLINE}}|$(cat cmdline)|g" recovery.nsh
        sed -i "s|subvol=$SUBVOLUME_ROOT|subvol=\"$SUBVOLUME_SNAPSHOT\"|g" recovery.nsh
        cat recovery.nsh
        cp -v recovery.nsh "$ESP"

        cp -v "$DIR/startup.nsh" "$ESP" # autostart recovery.nsh
        ;;

    add-efi)
        echo "Adding boot entry for main EFI image..."

        # TODO(kdevo): this only adds the main EFI binary, consider adding the other EFI binaries as well.
        entry="/$EFI/$NAME.efi"
        [ -f "$ESP/$entry" ] || error "Error: EFI images are not generated yet."
        mount="$(findmnt -n -o SOURCE -T "$ESP")"
        partition="${mount##*[!0-9]}"

        efibootmgr --create --disk "$mount" --partition "$partition" --loader "${entry//\//\\}" --label "$NAME" --unicode
        ;;

    enroll-keys)
        echo "Enrolling Secure Boot keys..."

        sbctl enroll-keys
        sbctl status
        ;;

    generate-keys)
        echo "Generating Secure Boot keys..."

        sbctl create-keys
        sbctl status
        ;;

    *)
        error "Usage: $0 <initial-setup|generate-snapshots|generate-efi|add-efi|generate-keys|enroll-keys>"
        ;;
esac
