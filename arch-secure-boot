#!/bin/bash

set -e

DIR="/etc/arch-secure-boot"

[ -f "$DIR/config" ] && source "$DIR/config"

ESP="${ESP:-/efi}"
EFI="${EFI:-EFI/Linux}"

KERNEL="${KERNEL:-linux}"
KERNEL_LTS="linux-lts"

NAME="arch-${KERNEL}"
NAME_LTS="arch-${KERNEL_LTS}"
RECOVERY_NAME="recovery-${NAME}"
RECOVERY_NAME_LTS="recovery-${NAME_LTS}"

NAME_EFI_SHELL="efi-shell"

SUBVOLUME_ROOT="${SUBVOLUME_ROOT:-root}"
SUBVOLUME_SNAPSHOT="${SUBVOLUME_SNAPSHOT:-root/.snapshots/%1/snapshot}" # %1 is replaced with snapshot ID

CMDLINE=/etc/kernel/cmdline
[ -f "$CMDLINE" ] || CMDLINE=/proc/cmdline

cmd="$0 $@"
print_config() {
    cat >&2 << EOF

== Command ==
$cmd

== Config ==
ESP=$ESP
EFI=$EFI
KERNEL=$KERNEL
CMDLINE=$CMDLINE
EOF
}
trap 'print_config' ERR

error() {
    echo >&2 "$@"
    exit 1
}

case "$1" in
    initial-setup)
        # TODO(kdevo): we could automate a few things here to ease the setup
        echo "Welcome! This is the initial-setup for arch-secure-boot."
        echo "========================================================"
        echo "For information about UKIs, please read: https://wiki.archlinux.org/title/Unified_kernel_image#mkinitcpio, from 1.1.1 to 1.1.3."
        echo "For information about sbctl and potential risks, please read: https://wiki.archlinux.org/title/Unified_Extensible_Firmware_Interface/Secure_Boot#Assisted_process_with_sbctl"
        echo ""
        echo "PREPARATION: The following needs to be configured in BIOS before continuing:"
        echo "- Set secure admin password"
        echo "- Disable Secure Boot"
        echo "- Delete all Secure Boot keys"
        echo "- Put Secure Boot to Setup Mode"
        echo ""
        echo "After you press ENTER, the following will be done automatically:"
        echo "1. generate-keys: Generate UEFI secure boot keys via 'sbctl create-keys'."
        echo "2. enroll-keys: Enroll keys via 'sbctl enroll-keys' (by default WITHOUT Microsoft key)."
        echo "3. generate-efi: Generate EFI UKIs and shell in $ESP/$EFI and sign them via 'sbctl sign -s'."
        echo "4. generate-snapshots: Generate list of snapshots.txt in $ESP."
        echo ""
        echo "ATTENTION: There is no (automated) way to revert this. Please fully understand the consequences before continuing."
        read 
        "$0" generate-keys
        "$0" enroll-keys
        "$0" generate-efi
        "$0" generate-snapshots
        # TODO(kdevo): re-enable add-efi
        #"$0" add-efi
        echo ""
        echo "Done with automated steps."
        echo "Open TODOs to be done by YOU:"
        # TODO(kdevo): offer to actually install mkinitcpio.d files to /etc (templatify files to ease setup)
        echo "- In order to automatically re-generate images when a new kernel is released, consider copying files in $DIR/mkinitcpio.d/* to /etc/mkinitcpio.d."
        echo "- Harden BIOS: Enable Secure Boot, lock settings and boot order."
        ;;

    generate-snapshots)
        # descending order (n..0) not supported by snapper, so we sort and assemble table (header+table) on our own:
        table=$(snapper --iso --no-dbus -c root list --columns 'number,type,date,description' --disable-used-space)
        header=$(echo "$table" | head -n2)
        data=$(echo "$table" | tail -n +3 | sort -n -r)
        echo -e "${header}\n${data}" > "$ESP/snapshots.txt"

        # render template for ASCII banner:
        sed "s|{{snapshot_count}}|$(wc -l < "$ESP/snapshots.txt")|g" "$DIR/recovery.ascii.tmpl" > "$ESP/recovery.ascii"
        sed -i "s|{{created_at}}|$(date --rfc-3339=seconds)|g" "$ESP/recovery.ascii"
        ;;

    generate-efi)
        echo "Generating EFI images $NAME, $NAME_LTS..."

        mkinitcpio -p "$DIR/mkinitcpio.d/linux.preset"
        mkinitcpio -p "$DIR/mkinitcpio.d/linux-lts.preset"

        bins=(
            "$ESP/$EFI/$NAME.efi"
            "$ESP/$EFI/$NAME_LTS.efi"
        )
        for efi in "${bins[@]}"; do 
            sbctl sign -s "$efi";
        done
        echo "Successfully generated $NAME, $NAME_LTS..."

        $0 generate-efi-recovery
        ;;

    generate-efi-recovery)
        echo "Generating EFI recovery images $RECOVERY_NAME, $RECOVERY_NAME_LTS..."

        mkinitcpio -p "$DIR/mkinitcpio.d/recovery.preset"

        cp -T -v /usr/share/edk2-shell/x64/Shell_Full.efi "$ESP/$EFI/$NAME_EFI_SHELL.efi"
        bins=(
            "$ESP/$EFI/$RECOVERY_NAME.efi"
            "$ESP/$EFI/$RECOVERY_NAME_LTS.efi"
            "$ESP/$EFI/$NAME_EFI_SHELL.efi"
        )
        for efi in "${bins[@]}"; do 
            sbctl sign -s "$efi";
        done

        # prepare recovery.nsh
        tmp="$(mktemp -d)"
        trap 'rm -rf $tmp' EXIT
        cd "$tmp"

        efi_path="/$EFI/$RECOVERY_NAME.efi"
        efi_path_lts="/$EFI/$RECOVERY_NAME_LTS.efi"
        grep -m1 -v "^#" "$CMDLINE" > cmdline
        sed "s|{{PATH}}|${efi_path//\//\\\\}|g; s|{{CMDLINE}}|$(cat cmdline)|g" "$DIR/recovery.nsh.tmpl" > recovery.nsh
        sed -i "s|{{PATH_LTS}}|${efi_path_lts//\//\\\\}|g; s|{{CMDLINE}}|$(cat cmdline)|g" recovery.nsh
        sed -i "s|subvol=$SUBVOLUME_ROOT|subvol=\"$SUBVOLUME_SNAPSHOT\"|g" recovery.nsh

        cp -v recovery.nsh "$ESP"
        cp -v "$DIR/startup.nsh" "$ESP" # autostart recovery.nsh

        echo "Successfully generated $RECOVERY_NAME, $RECOVERY_NAME_LTS."
        ;;
    
    add-efi)
        echo "Adding boot entry for main EFI image..."

        # TODO(kdevo): this only adds the main EFI binary, consider adding the other EFI binaries as well.
        entry="/$EFI/$NAME.efi"
        [ -f "$ESP/$entry" ] || error "Error: EFI images are not generated yet."
        mount="$(findmnt -n -o SOURCE -T "$ESP")"
        partition="${mount##*[!0-9]}"

        efibootmgr --create --disk "$mount" --partition "$partition" --loader "${entry//\//\\}" --label "$NAME" --unicode
        ;;

    enroll-keys)
        echo "Enrolling Secure Boot keys..."

        sbctl enroll-keys
        sbctl status
        ;;

    generate-keys)
        echo "Generating Secure Boot keys..."

        sbctl create-keys
        sbctl status
        ;;

    *)
        error "Usage: $0 <initial-setup|generate-snapshots|generate-efi|add-efi|generate-keys|enroll-keys>"
        ;;
esac
